#include<iostream>
#include<string>
#include<math.h>
#include<fstream>
#include<ostream>
using namespace std;
class polong {
public :long x_coordinate;
		long y_coordinate;
		polong() {
			x_coordinate=0;
			y_coordinate=0;
		}
		polong(long a, long b) {
			x_coordinate = a;
			y_coordinate = b;
		}
		void setPolong(long a, long b) {
			x_coordinate = a;
			y_coordinate = b;
		}
};
long getSquareDiff(const polong& p1, const polong& p2) {
	long x_diff = p1.x_coordinate - p2.x_coordinate;
	long y_diff = p1.y_coordinate - p2.y_coordinate;
	return x_diff * x_diff + y_diff * y_diff;
}
bool is_valid(const polong& p1, const polong& p2, const polong& p3) {
	if (p1.x_coordinate == p2.x_coordinate && p1.x_coordinate == p3.x_coordinate) {
		return false;
	}
	if (p1.y_coordinate == p2.y_coordinate && p1.y_coordinate == p3.y_coordinate) {
		return false;
	}
	if (getSquareDiff(p1, p2) == 0 || getSquareDiff(p1, p3) == 0 || getSquareDiff(p2, p3) == 0) {
		return false;
	}
	long l[3];
	l[0] = getSquareDiff(p1, p2);
	l[1] = getSquareDiff(p3, p2);
	l[2] = getSquareDiff(p1, p3);
	long max1 = l[0] > l[1] ? 0 : 1;
	long short1 = max1 == 0 ? 1 : 2;
	long max = l[max1] > l[2] ? max1 : 2;
	long short2 = max == 1 ? 2 : max1;
	if (sqrt(l[short1]) + sqrt(l[short2]) == sqrt(l[max])) {
		return false;
	}
	return true;
}

long main() {
	char c;
	cin >> c;
	long x, y;
	polong p1, p2, p3;
	cin >> x >> c >> y >> c;
	p1.setPolong(x, y);
	cin >> x >> c >> y >> c;
	p2.setPolong(x, y);
	cin >> x >> c >> y >> c;
	p3.setPolong(x, y);
	if (!is_valid(p1, p2, p3)) {
		cout << "NT" << endl;
		system("pause");return 0;
	}
	long l[3];
	l[0] = getSquareDiff(p1, p2);
	l[1] = getSquareDiff(p3, p2);
	l[2] = getSquareDiff(p1, p3);
	if (l[0]==l[1] && l[1]==l[2]) {
		cout << "ET" << endl;
		system("pause"); return 0;
	}
	long max1 = l[0] > l[1] ? 0 : 1;
	long short1 = max1 == 0 ? 1 : 0;
	long max = l[max1] > l[2] ? max1 : 2;
	long short2 = max == 1 ? 2 : max1;
	if (l[short1] + l[short2] == l[max]) {
		if (l[short1] == l[short2]) {
			cout << "LRT" << endl;
			system("pause");return 0;
		}
		cout << "ORT" << endl;
		system("pause");return 0;
	}
	if (l[0] == l[1] || l[1] == l[2] || l[0] == l[2]) {
		cout << "OIT" << endl;
		system("pause");return 0;
	}
	cout << "OT" << endl;
	system("pause");return 0;	
}